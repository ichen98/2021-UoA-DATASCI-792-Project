# Replacing all missing values with NA
library(naniar)
master2018 <- master2018 %>% replace_with_na_all(~.x == "**")
# Converting dates into something usable
library(lubridate)
master2018$Date[21:38] <- "27/10/2018"
master2018$Date <- parse_date_time(master2018$Date, c("%d/%m/%Y"))
master2018 <- master2018[order(as.Date(master2018$Date)),]
master2018[, 5] <- parse_date_time(master2018[, 5], "MM:SS")
master2018[, 5] <- strptime(master2018[, 5], format = "%M:%S")
master2018[, 5] <- as.numeric(strptime(master2018[, 5], format = "%M:%S"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Loading the 2018 .csv files in
master2018 <-
list.files(path = "./2018_csvs/", pattern = "*.CSV", full.names = T) %>%
map_df(~read.csv(., skip = 4, header = TRUE))
# Getting the variable classes
varclasses <- unlist(lapply(master2018, class))
# Removing excess rows
master2018 <- subset(master2018, Athlete != "Avg" & Athlete != "Highest" & Athlete != "Lowest")
# Replacing all missing values with NA
library(naniar)
master2018 <- master2018 %>% replace_with_na_all(~.x == "**")
# Converting dates into something usable
library(lubridate)
master2018$Date[21:38] <- "27/10/2018"
master2018$Date <- parse_date_time(master2018$Date, c("%d/%m/%Y"))
master2018 <- master2018[order(as.Date(master2018$Date)),]
?substr
for (i in length(master2018[, 5])) {
if (length(master2018[i, 5]) == 6 | (length(master2018[i, 5]) == 5) & (as.numeric(substr(master2018[i, 5], 1, 2)) >= 95) & as.numeric(substr(master2018[i, 5], 4, 5)) > 0) {
master2018[i, 5] <- "95:00"
}
}
View(master2018)
length(master2018[29, 5])
master2018[29, 5]
class(master2018)
?map_df
master2018[29, 5][1]
master2018[29, 5][[1]]
length(master2018[,5])
master2018[,5]
master2018[,5][[1]]
for (i in length(master2018[, 5][[1]])) {
if (length(master2018[i, 5][[1]]) == 6 | (length(master2018[i, 5][[1]]) == 5) & (as.numeric(substr(master2018[i, 5][[1]], 1, 2)) >= 95) & as.numeric(substr(master2018[i, 5][[1]], 4, 5)) > 0) {
master2018[i, 5][[1]] <- "95:00"
}
}
View(master2018)
length(master2018[, 5][[1]])
length(master2018[1, 5][[1]])
master2018[1, 5][[1]]
class(master2018[1, 5][[1]])
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Loading the 2018 .csv files in
master2018 <-
list.files(path = "./2018_csvs/", pattern = "*.CSV", full.names = T) %>%
map_df(~read.csv(., skip = 4, header = TRUE)) %>%
as.data.frame()
# Getting the variable classes
varclasses <- unlist(lapply(master2018, class))
# Removing excess rows
master2018 <- subset(master2018, Athlete != "Avg" & Athlete != "Highest" & Athlete != "Lowest")
# Replacing all missing values with NA
library(naniar)
master2018 <- master2018 %>% replace_with_na_all(~.x == "**")
# Converting dates into something usable
library(lubridate)
master2018$Date[21:38] <- "27/10/2018"
master2018$Date <- parse_date_time(master2018$Date, c("%d/%m/%Y"))
master2018 <- master2018[order(as.Date(master2018$Date)),]
class(master2018)
unlist(master2018)
class(unlist(master2018))
?unlist
dim(unlist(master2018))
length(unlist(master2018))
knitr::opts_chunk$set(echo = TRUE)
master2018[, 5] <- parse_time(master2018[, 5], "%M:%S")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Loading the 2018 .csv files in
# files2018 <- list.files(path = "./2018_csvs/", pattern = "*.CSV", full.names = T)
# master2018 <- data.frame()
# for (i in files2018) {
#   master2018 <- rbind(master2018, read.csv(i, skip = 4, header = TRUE))
# }
master2018 <- list.files(path = "./2018_csvs/", pattern = "*.CSV", full.names = T) %>%
map_df(~read.csv(., skip = 4, header = TRUE))
# Getting the variable classes
varclasses <- unlist(lapply(master2018, class))
# Removing excess rows
master2018 <- subset(master2018, Athlete != "Avg" & Athlete != "Highest" & Athlete != "Lowest")
# Replacing all missing values with NA
master2018 <- na_if(master2018, "**")
# Converting dates into something usable
library(lubridate)
master2018$Date[21:38] <- "27/10/2018"
master2018$Date <- parse_date_time(master2018$Date, c("%d/%m/%Y"))
master2018 <- master2018[order(as.Date(master2018$Date)),]
master2018[, 5] <- parse_time(master2018[, 5], "%M:%S")
?substr
?nchar
minsec_to_sec <- function(strvec) {
prelength <- ifelse(nchar(strvec) == 6, 3, ifelse(nchar(strvec) == 5), 2, 1)
pre <- as.numeric(substr(strvec, 1, prelength))
suf <- as.numeric(substr(strvec, nchar(strvec) - 1, nchar(strvec[i])))
strvec[i] <- pre * 60 + suf
return(strvec)
}
master2018[, 5] <- minsec_to_sec(master2018[, 5])
minsec_to_sec <- function(strvec) {
prelength <- ifelse(nchar(strvec) == 6, 3, ifelse(nchar(strvec) == 5, 2, 1))
pre <- as.numeric(substr(strvec, 1, prelength))
suf <- as.numeric(substr(strvec, nchar(strvec) - 1, nchar(strvec[i])))
strvec[i] <- pre * 60 + suf
return(strvec)
}
master2018[, 5] <- minsec_to_sec(master2018[, 5])
minsec_to_sec <- function(strvec) {
prelength <- ifelse(nchar(strvec) == 6, 3, ifelse(nchar(strvec) == 5, 2, 1))
pre <- as.numeric(substr(strvec, 1, prelength))
suf <- as.numeric(substr(strvec, nchar(strvec) - 1, nchar(strvec)))
strvec[i] <- pre * 60 + suf
return(strvec)
}
master2018[, 5] <- minsec_to_sec(master2018[, 5])
minsec_to_sec <- function(strvec) {
prelength <- ifelse(nchar(strvec) == 6, 3, ifelse(nchar(strvec) == 5, 2, 1))
pre <- as.numeric(substr(strvec, 1, prelength))
suf <- as.numeric(substr(strvec, nchar(strvec) - 1, nchar(strvec)))
strvec <- pre * 60 + suf
return(strvec)
}
master2018[, 5] <- minsec_to_sec(master2018[, 5])
minsec_to_sec <- function(strvec) {
prelength <- ifelse(nchar(strvec) == 6, 3, ifelse(nchar(strvec) == 5, 2, 1))
pre <- as.numeric(substr(strvec, 1, prelength))
pre
suf <- as.numeric(substr(strvec, nchar(strvec) - 1, nchar(strvec)))
strvec <- pre * 60 + suf
return(strvec)
}
master2018[, 5] <- minsec_to_sec(master2018[, 5])
minsec_to_sec <- function(strvec) {
prelength <- ifelse(nchar(strvec) == 6, 3, ifelse(nchar(strvec) == 5, 2, 1))
pre <- as.numeric(substr(strvec, 1, prelength))
print(pre)
suf <- as.numeric(substr(strvec, nchar(strvec) - 1, nchar(strvec)))
strvec <- pre * 60 + suf
return(strvec)
}
master2018[, 5] <- minsec_to_sec(master2018[, 5])
minsec_to_sec <- function(strvec) {
prelength <- ifelse(nchar(strvec) == 6, 3, ifelse(nchar(strvec) == 5, 2, 1))
pre <- as.numeric(substr(strvec, 1, prelength))
print(pre)
suf <- as.numeric(substr(strvec, nchar(strvec) - 1, nchar(strvec)))
print(suf)
strvec <- pre * 60 + suf
return(strvec)
}
master2018[, 5] <- minsec_to_sec(master2018[, 5])
minsec_to_sec <- function(strvec) {
prelength <- ifelse(nchar(strvec) == 6, 3, ifelse(nchar(strvec) == 5, 2, 1))
print(prelength)
pre <- as.numeric(substr(strvec, 1, prelength))
print(pre)
suf <- as.numeric(substr(strvec, nchar(strvec) - 1, nchar(strvec)))
print(suf)
strvec <- pre * 60 + suf
return(strvec)
}
master2018[, 5] <- minsec_to_sec(master2018[, 5])
nchar("11:53", "98:23", "108:44")
nchar(c("11:53", "98:23", "108:44"))
class(master2018[, 5])
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Loading the 2018 .csv files in
master2018 <-
list.files(path = "./2018_csvs/", pattern = "*.CSV", full.names = T) %>%
map_df(~read.csv(., skip = 4, header = TRUE))
# Getting the variable classes
varclasses <- unlist(lapply(master2018, class))
# Removing excess rows
master2018 <- subset(master2018, Athlete != "Avg" & Athlete != "Highest" & Athlete != "Lowest")
# Replacing all missing values with NA
master2018 <- na_if(master2018, "**")
# Converting dates into something usable
library(lubridate)
master2018$Date[21:38] <- "27/10/2018"
master2018$Date <- parse_date_time(master2018$Date, c("%d/%m/%Y"))
master2018 <- master2018[order(as.Date(master2018$Date)),]
class(master2018[, 5])
minsec_to_sec <- function(strvec) {
prelength <- ifelse(nchar(strvec) == 6, 3, ifelse(nchar(strvec) == 5, 2, 1))
print(prelength)
pre <- as.numeric(substr(strvec, 1, prelength))
print(pre)
suf <- as.numeric(substr(strvec, nchar(strvec) - 1, nchar(strvec)))
print(suf)
strvec <- pre * 60 + suf
return(strvec)
}
master2018[, 5] <- minsec_to_sec(master2018[, 5])
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Loading the 2018 .csv files in
master2018 <-
list.files(path = "./2018_csvs/", pattern = "*.CSV", full.names = T) %>%
map_df(~read.csv(., skip = 4, header = TRUE))
# Getting the variable classes
varclasses <- unlist(lapply(master2018, class))
# Removing excess rows
master2018 <- subset(master2018, Athlete != "Avg" & Athlete != "Highest" & Athlete != "Lowest")
# Replacing all missing values with NA
master2018 <- na_if(master2018, "**")
# Converting dates into something usable
library(lubridate)
master2018$Date[21:38] <- "27/10/2018"
master2018$Date <- parse_date_time(master2018$Date, c("%d/%m/%Y"))
master2018 <- master2018[order(as.Date(master2018$Date)),]
minsec_to_sec <- function(strvec) {
prelength <- ifelse(nchar(strvec) == 6, 3, ifelse(nchar(strvec) == 5, 2, 1))
pre <- as.numeric(substr(strvec, 1, prelength))
suf <- as.numeric(substr(strvec, nchar(strvec) - 1, nchar(strvec)))
strvec <- pre * 60 + suf
return(strvec)
}
master2018[, c(5:7, 19:20, 37:38)] <- minsec_to_sec(master2018[, c(5:7, 19:20, 37:38)])
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Loading the 2018 .csv files in
master2018 <-
list.files(path = "./2018_csvs/", pattern = "*.CSV", full.names = T) %>%
map_df(~read.csv(., skip = 4, header = TRUE))
# Getting the variable classes
varclasses <- unlist(lapply(master2018, class))
# Removing excess rows
master2018 <- subset(master2018, Athlete != "Avg" & Athlete != "Highest" & Athlete != "Lowest")
# Replacing all missing values with NA
master2018 <- na_if(master2018, "**")
# Converting dates into something usable
library(lubridate)
master2018$Date[21:38] <- "27/10/2018"
master2018$Date <- parse_date_time(master2018$Date, c("%d/%m/%Y"))
master2018 <- master2018[order(as.Date(master2018$Date)),]
return(strvec)
minsec_to_sec <- function(strvec) {
prelength <- ifelse(nchar(strvec) == 6, 3, ifelse(nchar(strvec) == 5, 2, 1))
pre <- as.numeric(substr(strvec, 1, prelength))
suf <- as.numeric(substr(strvec, nchar(strvec) - 1, nchar(strvec)))
strvec <- pre * 60 + suf
return(strvec)
}
?lapply
?mapply
?tapply
minsec_to_sec <- function(strvec) {
prelength <- ifelse(nchar(strvec) == 6, 3, ifelse(nchar(strvec) == 5, 2, 1))
pre <- as.numeric(substr(strvec, 1, prelength))
suf <- as.numeric(substr(strvec, nchar(strvec) - 1, nchar(strvec)))
strvec <- pre * 60 + suf
return(strvec)
}
master2018[, c(5:7, 19:20, 37:38)] <- lapply(master2018[, c(5:7, 19:20, 37:38)], minsec_to_sec)
95*60
120*60
6000/5700
5700/6000
master2018[41, 3] == "2018-10-27"
master2018[237, 3] == "2018-10-27"
master2018[237, 3]
master2018[237, 3] == "2018-10-27 UTC"
master2018[41, 3] == "2018-10-27 UTC"
as.character(master2018[237, 3]) == "2018-10-27 UTC"
as.character(master2018[237, 3]) == "2018-10-27"
knitr::opts_chunk$set(echo = TRUE)
master2018$Proportion <- ifelse(as.character(master2018[, 3]) == "2018-10-27", 7200 / master2018$Duration..Total..min.sec., 5700 / master2018$Duration..Total..min.sec.)
master2018$Proportion <- ifelse(
as.character(master2018[, 3]) == "2018-10-27",
7200 / master2018$Duration..Total..min.sec.,
5700 / master2018$Duration..Total..min.sec.)
for (i in c(5:7, 19:20, 37:38)) {
master2018[, i] <- master2018[, i] * master2018$Proportion
}
which(master2018$Proportion > 1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Loading the 2018 .csv files in
master2018 <-
list.files(path = "./2018_csvs/", pattern = "*.CSV", full.names = T) %>%
map_df(~read.csv(., skip = 4, header = TRUE))
# Getting the variable classes
varclasses <- unlist(lapply(master2018, class))
# Removing excess rows
master2018 <- subset(master2018, Athlete != "Avg" & Athlete != "Highest" & Athlete != "Lowest")
# Replacing all missing values with NA
master2018 <- na_if(master2018, "**")
# Converting dates into something usable
library(lubridate)
master2018$Date[21:38] <- "27/10/2018"
master2018$Date <- parse_date_time(master2018$Date, c("%d/%m/%Y"))
master2018 <- master2018[order(as.Date(master2018$Date)),]
minsec_to_sec <- function(strvec) {
# All durations are in "MM:SS" format; durations > 1 hr simply have MM > 59
prelength <- ifelse(nchar(strvec) == 6, 3, ifelse(nchar(strvec) == 5, 2, 1))
pre <- as.numeric(substr(strvec, 1, prelength))
suf <- as.numeric(substr(strvec, nchar(strvec) - 1, nchar(strvec)))
strvec <- pre * 60 + suf
return(strvec)
}
master2018[, c(5:7, 19:20, 37:38)] <- lapply(master2018[, c(5:7, 19:20, 37:38)], minsec_to_sec)
master2018$Proportion <- ifelse(
as.character(master2018[, 3]) == "2018-10-27",
7200 / master2018$Duration..Total..min.sec.,
5700 / master2018$Duration..Total..min.sec.)
master2018$Proportion[which(master2018$Proportion > 1)] <- 1
for (i in c(5:7, 19:20, 37:38)) {
master2018[, i] <- master2018[, i] * master2018$Proportion
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Loading the 2018 .csv files in
master2018 <-
list.files(path = "./2018_csvs/", pattern = "*.CSV", full.names = T) %>%
map_df(~read.csv(., skip = 4, header = TRUE))
# Getting the variable classes
varclasses <- unlist(lapply(master2018, class))
# Removing excess rows
master2018 <- subset(master2018, Athlete != "Avg" & Athlete != "Highest" & Athlete != "Lowest")
# Replacing all missing values with NA
master2018 <- na_if(master2018, "**")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Loading the 2018 .csv files in
master2018 <-
list.files(path = "./2018_csvs/", pattern = "*.CSV", full.names = T) %>%
map_df(~read.csv(., skip = 4, header = TRUE))
# Getting the variable classes
varclasses <- unlist(lapply(master2018, class))
View(master2018)
?values
unique(master2018$X)
unique(master2018$X..MaxHR)
colnames(master2018)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Loading the 2018 .csv files in
master2018 <-
list.files(path = "./2018_csvs/", pattern = "*.CSV", full.names = T) %>%
map_df(~read.csv(., skip = 4, header = TRUE))
# Getting the variable classes
varclasses <- unlist(lapply(master2018, class))
# Removing excess rows
master2018 <- subset(master2018, Athlete != "Avg" & Athlete != "Highest" & Athlete != "Lowest")
# Replacing all missing values with NA
master2018 <- na_if(master2018, "**")
# Converting dates into something usable
library(lubridate)
master2018$Date[21:38] <- "27/10/2018"
master2018$Date <- parse_date_time(master2018$Date, c("%d/%m/%Y"))
master2018 <- master2018[order(as.Date(master2018$Date)), -51]
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Loading the 2018 .csv files in
master2018 <-
list.files(path = "./2018_csvs/", pattern = "*.CSV", full.names = T) %>%
map_df(~read.csv(., skip = 4, header = TRUE))
# Getting the variable classes
varclasses <- unlist(lapply(master2018, class))
# Removing excess rows
master2018 <- subset(master2018, Athlete != "Avg" & Athlete != "Highest" & Athlete != "Lowest")
# Replacing all missing values with NA
master2018 <- na_if(master2018, "**")
# Converting dates into something usable
library(lubridate)
master2018$Date[21:38] <- "27/10/2018"
master2018$Date <- parse_date_time(master2018$Date, c("%d/%m/%Y"))
# Sorting by date, dropping redundant column `X`
master2018 <- master2018[order(as.Date(master2018$Date)), -51]
minsec_to_sec <- function(strvec) {
# All durations are in "MM:SS" format; durations > 1 hr simply have MM > 59
prelength <- ifelse(nchar(strvec) == 6, 3, ifelse(nchar(strvec) == 5, 2, 1))
pre <- as.numeric(substr(strvec, 1, prelength))
suf <- as.numeric(substr(strvec, nchar(strvec) - 1, nchar(strvec)))
strvec <- pre * 60 + suf
return(strvec)
}
master2018[, c(5:7, 19:20, 37:38)] <- lapply(master2018[, c(5:7, 19:20, 37:38)], minsec_to_sec)
# Calculating proportion by the above method
master2018$Proportion <- ifelse(
as.character(master2018[, 3]) == "2018-10-27",
7200 / master2018$Duration..Total..min.sec.,
5700 / master2018$Duration..Total..min.sec.)
# Only interested in adjusting values that have a `Proportion` value < 1
master2018$Proportion[which(master2018$Proportion > 1)] <- 1
for (i in c(5:7, 19:20, 37:38)) {
master2018[, i] <- master2018[, i] * master2018$Proportion
}
View(master2018)
master2018[, 17] <- as.numeric(substr(master2018[, 17], 1, length(master2018[, 17]) - 1))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Loading the 2018 .csv files in
master2018 <-
list.files(path = "./2018_csvs/", pattern = "*.CSV", full.names = T) %>%
map_df(~read.csv(., skip = 4, header = TRUE))
# Getting the variable classes
varclasses <- unlist(lapply(master2018, class))
# Removing excess rows
master2018 <- subset(master2018, Athlete != "Avg" & Athlete != "Highest" & Athlete != "Lowest")
# Replacing all missing values with NA
master2018 <- na_if(master2018, "**")
# Converting dates into something usable
library(lubridate)
master2018$Date[21:38] <- "27/10/2018"
master2018$Date <- parse_date_time(master2018$Date, c("%d/%m/%Y"))
# Sorting by date, dropping redundant column `X`
master2018 <- master2018[order(as.Date(master2018$Date)), -51]
minsec_to_sec <- function(strvec) {
# All durations are in "MM:SS" format; durations > 1 hr simply have MM > 59
prelength <- ifelse(nchar(strvec) == 6, 3, ifelse(nchar(strvec) == 5, 2, 1))
pre <- as.numeric(substr(strvec, 1, prelength))
suf <- as.numeric(substr(strvec, nchar(strvec) - 1, nchar(strvec)))
strvec <- pre * 60 + suf
return(strvec)
}
master2018[, c(5:7, 19:20, 37:38)] <- lapply(master2018[, c(5:7, 19:20, 37:38)], minsec_to_sec)
# Calculating proportion by the above method
master2018$Proportion <- ifelse(
as.character(master2018[, 3]) == "2018-10-27",
7200 / master2018$Duration..Total..min.sec.,
5700 / master2018$Duration..Total..min.sec.)
# Only interested in adjusting values that have a `Proportion` value < 1
master2018$Proportion[which(master2018$Proportion > 1)] <- 1
for (i in c(5:7, 19:20, 37:38)) {
master2018[, i] <- master2018[, i] * master2018$Proportion
}
master2018[, 17] <- as.numeric(substr(master2018[, 17], 1, nchar(master2018[, 17]) - 1))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Loading the 2018 .csv files in
master2018 <-
list.files(path = "./2018_csvs/", pattern = "*.CSV", full.names = T) %>%
map_df(~read.csv(., skip = 4, header = TRUE))
# Getting the variable classes
varclasses <- unlist(lapply(master2018, class))
# Removing excess rows
master2018 <- subset(master2018, Athlete != "Avg" & Athlete != "Highest" & Athlete != "Lowest")
# Replacing all missing values with NA
master2018 <- na_if(master2018, "**")
# Converting dates into something usable
library(lubridate)
master2018$Date[21:38] <- "27/10/2018"
master2018$Date <- parse_date_time(master2018$Date, c("%d/%m/%Y"))
# Sorting by date, dropping redundant column `X`
master2018 <- master2018[order(as.Date(master2018$Date)), -51]
minsec_to_sec <- function(strvec) {
# All durations are in "MM:SS" format; durations > 1 hr simply have MM > 59
prelength <- ifelse(nchar(strvec) == 6, 3, ifelse(nchar(strvec) == 5, 2, 1))
pre <- as.numeric(substr(strvec, 1, prelength))
suf <- as.numeric(substr(strvec, nchar(strvec) - 1, nchar(strvec)))
strvec <- pre * 60 + suf
return(strvec)
}
master2018[, c(5:7, 19:20, 37:38)] <- lapply(master2018[, c(5:7, 19:20, 37:38)], minsec_to_sec)
# Calculating proportion by the above method
master2018$Proportion <- ifelse(
as.character(master2018[, 3]) == "2018-10-27",
7200 / master2018$Duration..Total..min.sec.,
5700 / master2018$Duration..Total..min.sec.)
# Only interested in adjusting values that have a `Proportion` value < 1
master2018$Proportion[which(master2018$Proportion > 1)] <- 1
for (i in c(5:7, 19:20, 37:38)) {
master2018[, i] <- master2018[, i] * master2018$Proportion
}
# Removing percentage symbols
master2018[, 17] <- as.numeric(substr(master2018[, 17], 1, nchar(master2018[, 17]) - 1))
View(master2018)
unique(master2018$Athlete)
sort(unique(master2018$Athlete))
?read.csv
?rep
master2019 <-
list.files(path = "./2019_csvs/", pattern = "*.CSV", full.names = T) %>%
map_df(~read.csv(., skip = 4, header = TRUE, colClasses = rep("character", 17)))
master2020 <-
list.files(path = "./2020_csvs/", pattern = "*.CSV", full.names = T) %>%
map_df(~read.csv(., skip = 4, header = TRUE))
View(master2020)
View(master2019)
# Removing excess rows
master2019 <- subset(master2019, Athlete != "Avg" & Athlete != "Highest" & Athlete != "Lowest")
# Replacing all missing values with NA
master2019 <- na_if(master2019, "**")
sort(unique(master2019$Athlete))
?unique
sort(unique(cbind(master2018$Athlete, master2019$Athlete, master2020$Athlete)))
sort(unique(rbind(master2018$Athlete, master2019$Athlete, master2020$Athlete)))
rbind(master2018$Athlete, master2019$Athlete, master2020$Athlete)
master2018$Athlete + master2019$Athlete + master2020$Athlete
c(master2018$Athlete, master2019$Athlete, master2020$Athlete)
# Removing excess rows
master2020 <- subset(master2020, Athlete != "Avg" & Athlete != "Highest" & Athlete != "Lowest")
# Replacing all missing values with NA
master2020 <- na_if(master2020, "**")
sort(unique(c(master2018$Athlete, master2019$Athlete, master2020$Athlete)))
